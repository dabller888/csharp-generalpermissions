<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<#@include file="$(ProjectDir)\Tools.ttinclude"#> 
<#@include file="$(ProjectDir)\DbHelper.ttinclude"#> 

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(ProjectDir)\MultipleOutputHelper.ttinclude"#> 
/**
（1）删除
1，删除复合主键待优化
2，改成根据主键一次性删除
**/
<#      SqlConnection conn = new SqlConnection(config.ConnectionString);
        conn.Open();
    
        string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
        SqlCommand command = new SqlCommand(selectQuery,conn);
        SqlDataAdapter ad = new SqlDataAdapter(command);
        System.Data.DataSet ds = new DataSet();
  
        var manager = Manager.Create(Host, GenerationEnvironment);  

        System.Data.DataTable schema = conn.GetSchema("Tables");
        foreach(System.Data.DataRow row in schema.Rows)
        {    
            ds.Tables.Clear();
            string tb_name= row["TABLE_NAME"].ToString();       
			command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
            ad.FillSchema(ds, SchemaType.Mapped,tb_name);  
            manager.StartNewFile(tb_name+"Service.cs");#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using QY.Stage.PocoModel;
using QY.Stage.ViewModel;
using QY.Stage.Frameworks.DAL;
namespace QY.Stage.Frameworks.BLL {
    public partial class <#= tb_name#>Service {
		private readonly <#= tb_name#>Repository dao = new <#= tb_name#>Repository();

        public int Add(<#= tb_name#> model) {
            return dao.Add(model);
        }

        public <#= tb_name#> Get(<#= StringExt.GetPKParams(tb_name)#>) {
            return dao.GetEntity(<#= StringExt.GetPKExpression(tb_name)#>);
        }

        public <#= tb_name#> Get(Expression<Func<<#= tb_name#>,bool>> query) {
            return dao.GetEntity(query);
        }

        public int Update(<#= tb_name#> model) {
            return dao.Update(model, null);
        }
        public int Delete(List<int> ids) {
            //改成根据主键一次性删除
            int rows = 0;
            foreach (var id in ids) {
                rows += dao.Remove(new <#= tb_name#>() { <#= StringExt.GetPKs(tb_name)#> = id });
            }
            return rows;
        }
        public List<<#= tb_name#>> GetAllList() {
            return dao.GetList(m => true);
        }

        public List<<#= tb_name#>> GetPageList(<#= tb_name#>Request query) {
            int total = 0;
            List<<#= tb_name#>> list = dao.GetListOrder(<#= StringExt.GetPKQExpression(tb_name)#>, <#= StringExt.GetSortExpression(tb_name)#>, true, query.PageSize, query.PageIndex, out total);
            query.TotalCount = total;
            return list;
        }
    }
}    
<#
        manager.EndBlock();    
         }            
        conn.Close();  
       manager.Process(true);  
        #>