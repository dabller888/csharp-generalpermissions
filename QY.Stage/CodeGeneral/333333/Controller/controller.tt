<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<#@include file="$(ProjectDir)\Tools.ttinclude"#> 
<#@include file="$(ProjectDir)\DbHelper.ttinclude"#> 

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(ProjectDir)\MultipleOutputHelper.ttinclude"#> 

<#      SqlConnection conn = new SqlConnection(config.ConnectionString);
        conn.Open();
    
        string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
        SqlCommand command = new SqlCommand(selectQuery,conn);
        SqlDataAdapter ad = new SqlDataAdapter(command);
        System.Data.DataSet ds = new DataSet();
  
        var manager = Manager.Create(Host, GenerationEnvironment);  

        System.Data.DataTable schema = conn.GetSchema("Tables");
        foreach(System.Data.DataRow row in schema.Rows)
        {    
            ds.Tables.Clear();
            string tb_name= row["TABLE_NAME"].ToString();       
			command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
            ad.FillSchema(ds, SchemaType.Mapped,tb_name);  
            manager.StartNewFile(tb_name+"Controller.cs");#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using QY.Stage.Frameworks.Utility;
using QY.Stage.ViewModel;
using QY.Stage.PocoModel;
using QY.Stage.Frameworks.BLL;

namespace QY.Stage.Web.Areas.Back.Controllers {
    public class <#=tb_name#>Controller : Controller {
		private readonly <#=tb_name#>Service <#=StringExt.ToLower(tb_name) #>Service = new <#=tb_name#>Service();

		#region /****View Action****/
        public ActionResult Index() {
            return View();
        }
        #endregion

		#region /****Go Action****/
		[HttpPost]
		public ActionResult List() {
            string pageIndex = Request["page"] ?? "1";
            string pageSize = Request["rows"] ?? "10";

            <#=tb_name#>Request query = new <#=tb_name#>Request();
            query.PageIndex = int.Parse(pageIndex);
            query.PageSize = int.Parse(pageSize);
            query.TotalCount = 0;
            var rows = from u in <#=StringExt.ToLower(tb_name) #>Service.GetPageList(query)
                       select new { <#=StringExt.GetQueryColumns(tb_name) #> };
            int total = query.TotalCount;
            return Json(new { total = total, rows = rows }, JsonRequestBehavior.DenyGet);
        
        }

		[HttpPost]
		public ActionResult Detail(<#=StringExt.GetPKParams(tb_name) #>) {
            var <#=StringExt.ToLower(tb_name) #> = <#=StringExt.ToLower(tb_name) #>Service.Get(<#=StringExt.GetPKs(tb_name) #>);
            var result = new ResponseParams();
            if (elder == null) {
                result.Code = ResponseCode.ERROR;
                result.Message = string.Empty;
                result.Content = string.Empty;
            } else {
                result.Code = ResponseCode.SUCCESS;
                result.Message = string.Empty;
                result.Content = <#=StringExt.ToLower(tb_name) #>;
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

		[HttpPost]
		public ActionResult Add(<#=tb_name#>Request query) {
            var result = new ResponseParams();
            var <#=StringExt.ToLower(tb_name) #> = new <#=tb_name#> {
                <#
				PushIndent("                ");
				var dbColumns = DbHelper.GetDbColumns(config.ConnectionString,config.DbDatabase,tb_name);
				int i=0;
				foreach (DbColumn dc in dbColumns) 
				{
					i++;
					if(dc.IsPrimaryKey)	continue;
					if(i == dbColumns.Count()){
						WriteLine(dc.ColumnName + " = query." + dc.ColumnName);
						break;
					}
					WriteLine(dc.ColumnName + " = query." + dc.ColumnName + ",");
				}
				PopIndent();
				#>
            };
            if (<#=StringExt.ToLower(tb_name) #>Service.Add(<#=StringExt.ToLower(tb_name) #>) > 0) {
                result.Code = ResponseCode.SUCCESS;
                result.Message = "添加成功!";
                result.Content = null;
            } else {
                result.Code = ResponseCode.ERROR;
                result.Message = "添加失败!";
                result.Content = null;
            }
            return Json(result, JsonRequestBehavior.DenyGet);
        }

		[HttpPost]
		public ActionResult Save(<#=tb_name#>Request query) {
            var result = new ResponseParams();
            var <#=StringExt.ToLower(tb_name) #> = new <#=tb_name#> {
                <#
				PushIndent("                ");
				var _dbColumns = DbHelper.GetDbColumns(config.ConnectionString,config.DbDatabase,tb_name);
				int _i=0;
				foreach (DbColumn dc in _dbColumns) 
				{
					_i++;
					if(_i == dbColumns.Count()){
						WriteLine(dc.ColumnName + " = query." + dc.ColumnName);
						break;
					}
					WriteLine(dc.ColumnName + " = query." + dc.ColumnName + ",");
				}
				PopIndent();
				#>
            };
            var _<#=StringExt.ToLower(tb_name) #> = <#=StringExt.ToLower(tb_name) #>Service.Get(m => m.<#=StringExt.GetPKs(tb_name) #> == query.<#=StringExt.GetPKs(tb_name) #>);
            if (_<#=StringExt.ToLower(tb_name) #> != null) { }
            if (<#=StringExt.ToLower(tb_name) #>Service.Update(<#=StringExt.ToLower(tb_name) #>) > 0) {
                result.Code = ResponseCode.SUCCESS;
                result.Message = "修改成功!";
                result.Content = null;
            } else {
                result.Code = ResponseCode.ERROR;
                result.Message = "修改失败!";
                result.Content = null;
            }
            return Json(result,JsonRequestBehavior.DenyGet);
        }

		[HttpPost]
		public ActionResult Delete(string <#=StringExt.GetPKs(tb_name) #>s) {
            var result = new ResponseParams();
            if (!String.IsNullOrEmpty(<#=StringExt.GetPKs(tb_name) #>s)) {
                List<int> _<#=StringExt.GetPKs(tb_name) #>s = new List<int>();
                if (<#=StringExt.GetPKs(tb_name) #>s.IndexOf(",") >= 0) {
                    string[] ids = <#=StringExt.GetPKs(tb_name) #>s.Split(new char[] { ',' });
                    foreach (var id in ids) {
                        _<#=StringExt.GetPKs(tb_name) #>s.Add(Convert.ToInt32(id));
                    }
                } else {
                    _<#=StringExt.GetPKs(tb_name) #>s.Add(Convert.ToInt32(UserIds));
                }
                if (<#=StringExt.ToLower(tb_name) #>Service.Delete(userIds) > 0) {
                    result.Code = ResponseCode.SUCCESS;
                    result.Message = "删除成功!";
                } else {
                    result.Code = ResponseCode.ERROR;
                    result.Message = "删除失败!";
                }
            }
            return Json(result, JsonRequestBehavior.DenyGet);
        }
        #endregion

		#region /****the other****/

		#endregion
    }
}    
<#
        manager.EndBlock();    
         }            
        conn.Close();  
       manager.Process(true);  
        #>